{"version":3,"file":"static/js/722.6594890a.chunk.js","mappings":"+RAyDA,IA1CkB,SAAHA,GAA6D,IAAvDC,EAAID,EAAJC,KAAIC,EAAAF,EAAEG,KAAAA,OAAI,IAAAD,EAAG,OAAMA,EAAEE,EAAKJ,EAALI,MAAKC,EAAAL,EAAEM,YAAAA,OAAW,IAAAD,EAAGD,EAAKC,EAClEE,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAsBC,EAAAA,EAAAA,IAASb,GAAKc,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAA7BG,EAAKD,EAAA,GAAEE,EAAIF,EAAA,GAEVG,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,QAASC,EAAUH,EAAVG,MACVC,EAAcL,EAApBf,KAEFqB,EAA0B,aAATnB,EAEvB,OACEoB,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACC,UAAWP,GAASC,EAAQO,SAAA,EACvCC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,QAASR,EAAUK,SAAEtB,KAChCmB,EAAAA,EAAAA,MAACO,EAAAA,EAAU,CAAAJ,SAAA,EACTC,EAAAA,EAAAA,KAACI,EAAAA,IAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACJC,GAAIC,EAAAA,EACJC,GAAId,GACAL,GAAK,IACTb,KAAMmB,EAAkBX,EAAU,OAAS,WAAcR,EACzDG,YAAaA,EACb8B,aAAc,CAAEC,MAAO,SACvBC,aAAa,kBAEdhB,IACCK,EAAAA,EAAAA,KAACY,EAAAA,EAAiB,CAAAb,UAChBC,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACC,QAAQ,QAAQC,QAAS,kBAAM9B,GAAYD,EAAQ,EAACe,UAC1DC,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACV,GAAItB,EAAUiC,EAAAA,IAAeC,EAAAA,cAK3ClB,EAAAA,EAAAA,KAACmB,EAAAA,GAAgB,CAAApB,SAAER,KAEjBA,GAASE,IACTG,EAAAA,EAAAA,MAACwB,EAAAA,EAAI,CAACV,MAAM,YAAWX,SAAA,EACrBC,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACV,GAAIe,EAAAA,MAAiB,WAClB3B,OAKnB,C,wJChDM4B,EAAgB,CACpBhD,KAAM,GACNiD,MAAO,GACPC,SAAU,IAGNC,EAAeC,EAAAA,KAAaC,MAAM,CACtCrD,KAAMoD,EAAAA,KACHE,IAAI,EAAG,cACPC,QAAQ,cAAe,wBACvBC,SAAS,YACZP,MAAOG,EAAAA,KACJG,QAAQ,mCAAoC,4BAC5CC,SAAS,qBACZN,SAAUE,EAAAA,KACPI,SAAS,wBACTF,IAAI,EAAG,uDAsDZ,EAnDqB,WACnB,IAAMG,GAAWC,EAAAA,EAAAA,MAEjB,OACEhC,EAAAA,EAAAA,KAACiC,EAAAA,GAAM,CACLX,cAAeA,EACfY,iBAAkBT,EAClBU,kBAAgB,EAChBC,SAAU,SAACC,EAAMhE,GAAqB,IAAjBiE,EAASjE,EAATiE,UACnBP,GAASQ,EAAAA,EAAAA,IAASF,IAClBC,GACF,EAAEvC,SAED,kBACCH,EAAAA,EAAAA,MAAC4C,EAAAA,EAAI,CACHlC,GAAImC,EAAAA,GACJC,UAAU,SACVC,IAAI,OACJC,KAAK,KACLC,GAAG,OACHC,GAAG,IACHC,EAAE,IACFC,OAAO,YACPC,YAAY,WACZC,aAAa,KACbvC,aAAa,eAAcZ,SAAA,EAE3BC,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CAAC7E,KAAK,OAAOG,MAAM,OAAOE,YAAY,qBAChDqB,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CACR7E,KAAK,QACLE,KAAK,QACLC,MAAM,QACNE,YAAY,iBAGdqB,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CACR7E,KAAK,WACLE,KAAK,WACLC,MAAM,WACNE,YAAY,oBAGdqB,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACrC,KAAK,SAAS4E,YAAY,OAAOC,GAAG,IAAGtD,SAAC,cAG3C,GAIf,E,mBC9DA,EAVqB,WACnB,OACEC,EAAAA,EAAAA,KAACsD,EAAAA,GAAG,CAAChD,GAAG,UAAUiD,GAAI,GAAGxD,UACvBC,EAAAA,EAAAA,KAACwD,EAAAA,EAAS,CAACZ,KAAK,MAAK7C,UACnBC,EAAAA,EAAAA,KAACyD,EAAY,OAIrB,C","sources":["components/FormInput/FormInput.jsx","components/RegistrForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { Field, useField } from 'formik';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Button,\n  Text,\n  Icon,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { MdVisibility, MdVisibilityOff, MdCheckCircle } from 'react-icons/md';\n\nconst FormInput = ({ name, type = 'text', label, placeholder = label }) => {\n  const [visible, setVisible] = useState(false);\n  const [field, meta] = useField(name);\n\n  const { error, touched, value } = meta;\n  const { name: inputName } = field;\n\n  const typeIsPassword = type === 'password';\n\n  return (\n    <FormControl isInvalid={error && touched}>\n      <FormLabel htmlFor={inputName}>{label}</FormLabel>\n      <InputGroup>\n        <Field\n          as={Input}\n          id={inputName}\n          {...field}\n          type={typeIsPassword ? (visible ? 'text' : 'password') : type}\n          placeholder={placeholder}\n          _placeholder={{ color: 'black' }}\n          autoComplete=\"new-password\"\n        />\n        {typeIsPassword && (\n          <InputRightElement>\n            <Button variant=\"ghost\" onClick={() => setVisible(!visible)}>\n              <Icon as={visible ? MdVisibility : MdVisibilityOff} />\n            </Button>\n          </InputRightElement>\n        )}\n      </InputGroup>\n      <FormErrorMessage>{error}</FormErrorMessage>\n\n      {!error && value && (\n        <Text color=\"green.500\">\n          <Icon as={MdCheckCircle} />\n          Success {inputName}\n        </Text>\n      )}\n    </FormControl>\n  );\n};\n\nexport default FormInput;\n","import { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Flex } from '@chakra-ui/react';\nimport { register } from 'redux/auth/operations';\nimport FormInput from 'components/FormInput/FormInput';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst SignUpSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .matches(/^[A-Za-z]+$/, 'Only English letters')\n    .required('Required'),\n  email: Yup.string()\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Is not in correct format')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(7, 'Password is too short - should be 7 chars minimum'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={SignUpSchema}\n      validateOnChange\n      onSubmit={(values, { resetForm }) => {\n        dispatch(register(values));\n        resetForm();\n      }}\n    >\n      {() => (\n        <Flex\n          as={Form}\n          direction=\"column\"\n          gap=\"10px\"\n          maxW=\"md\"\n          mx=\"auto\"\n          my=\"4\"\n          p=\"4\"\n          border=\"1px solid\"\n          borderColor=\"gray.300\"\n          borderRadius=\"md\"\n          autoComplete=\"new-password\"\n        >\n          <FormInput name=\"name\" label=\"Name\" placeholder=\"Enter nick-name\" />\n          <FormInput\n            name=\"email\"\n            type=\"email\"\n            label=\"Email\"\n            placeholder=\"Enter email\"\n          />\n\n          <FormInput\n            name=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            placeholder=\"Enter password\"\n          />\n\n          <Button type=\"submit\" colorScheme=\"teal\" mt=\"4\">\n            Sign Up\n          </Button>\n        </Flex>\n      )}\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegistrForm/RegisterForm';\nimport { Box, Container } from '@chakra-ui/react';\n\nconst RegisterPage = () => {\n  return (\n    <Box as=\"section\" py={20}>\n      <Container maxW=\"2xl\">\n        <RegisterForm />\n      </Container>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["_ref","name","_ref$type","type","label","_ref$placeholder","placeholder","_useState","useState","_useState2","_slicedToArray","visible","setVisible","_useField","useField","_useField2","field","meta","error","touched","value","inputName","typeIsPassword","_jsxs","FormControl","isInvalid","children","_jsx","FormLabel","htmlFor","InputGroup","Field","_objectSpread","as","Input","id","_placeholder","color","autoComplete","InputRightElement","Button","variant","onClick","Icon","MdVisibility","MdVisibilityOff","FormErrorMessage","Text","MdCheckCircle","initialValues","email","password","SignUpSchema","Yup","shape","min","matches","required","dispatch","useDispatch","Formik","validationSchema","validateOnChange","onSubmit","values","resetForm","register","Flex","Form","direction","gap","maxW","mx","my","p","border","borderColor","borderRadius","FormInput","colorScheme","mt","Box","py","Container","RegisterForm"],"sourceRoot":""}