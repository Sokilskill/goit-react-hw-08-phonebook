{"version":3,"file":"static/js/501.03f2a439.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Button,\n  Text,\n  Flex,\n  Icon,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { MdVisibility, MdVisibilityOff, MdCheckCircle } from 'react-icons/md';\nimport { logIn } from 'redux/auth/operations';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst SignUpSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Is not in correct format')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(6, 'Password is too short - should be 6 chars minimum'),\n});\n\nconst LoginForm = () => {\n  const [visible, setVisible] = useState(false);\n\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={SignUpSchema}\n      validateOnChange\n      onSubmit={(values, { resetForm }) => {\n        dispatch(logIn(values));\n        resetForm();\n      }}\n    >\n      {({ errors, touched, values }) => (\n        <Flex\n          as={Form}\n          direction=\"column\"\n          gap=\"10px\"\n          maxW=\"md\"\n          mx=\"auto\"\n          my=\"4\"\n          p=\"4\"\n          border=\"1px solid\"\n          borderColor=\"gray.300\"\n          borderRadius=\"md\"\n          autoComplete=\"new-password\"\n        >\n          <FormControl isInvalid={errors.email && touched.email}>\n            <FormLabel htmlFor=\"email\">Email</FormLabel>\n            <Field\n              as={Input}\n              name=\"email\"\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              _placeholder={{ color: 'black' }}\n            />\n            <FormErrorMessage>\n              <Text color=\"red.500\">{errors.email}</Text>\n            </FormErrorMessage>\n\n            {!errors.email && values.email && (\n              <Text color=\"green.500\">\n                <Icon as={MdCheckCircle} />\n                Success email\n              </Text>\n            )}\n          </FormControl>\n\n          <FormControl isInvalid={errors.password && touched.password}>\n            <FormLabel htmlFor=\"password\">Password</FormLabel>\n            <InputGroup>\n              <Field\n                as={Input}\n                name=\"password\"\n                id=\"password\"\n                type={visible ? 'text' : 'password'}\n                placeholder=\"Password\"\n                _placeholder={{ color: 'black' }}\n                autoComplete=\"new-password\"\n              />\n              <InputRightElement>\n                <Button variant=\"ghost\" onClick={() => setVisible(!visible)}>\n                  <Icon as={visible ? MdVisibility : MdVisibilityOff} />\n                </Button>\n              </InputRightElement>\n            </InputGroup>\n            <FormErrorMessage>{errors.password}</FormErrorMessage>\n\n            {!errors.password && values.password && (\n              <Text color=\"green.500\">\n                <Icon as={MdCheckCircle} />\n                Success password\n              </Text>\n            )}\n          </FormControl>\n\n          <Button type=\"submit\" colorScheme=\"teal\" mt=\"4\">\n            Sign In\n          </Button>\n        </Flex>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n","import { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'redux/auth/selector';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport { Box, Container } from '@chakra-ui/react';\n\nconst LoginPage = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  return (\n    <Box as=\"section\" py={20}>\n      <Container maxW=\"2xl\">{!isLoggedIn && <LoginForm />}</Container>\n    </Box>\n  );\n};\n\nexport default LoginPage;\n"],"names":["initialValues","name","email","password","SignUpSchema","Yup","shape","matches","required","min","_useState","useState","_useState2","_slicedToArray","visible","setVisible","dispatch","useDispatch","_jsx","Formik","validationSchema","validateOnChange","onSubmit","values","_ref","resetForm","logIn","children","_ref2","errors","touched","_jsxs","Flex","as","Form","direction","gap","maxW","mx","my","p","border","borderColor","borderRadius","autoComplete","FormControl","isInvalid","FormLabel","htmlFor","Field","Input","id","type","placeholder","_placeholder","color","FormErrorMessage","Text","Icon","MdCheckCircle","InputGroup","InputRightElement","Button","variant","onClick","MdVisibility","MdVisibilityOff","colorScheme","mt","isLoggedIn","useSelector","selectIsLoggedIn","Box","py","Container","LoginForm"],"sourceRoot":""}